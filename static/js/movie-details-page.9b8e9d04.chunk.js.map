{"version":3,"sources":["utils/constants.js","services/serviceAPI.js","services/serviceSlugify.js","components/Cast/Cast.js","components/Reviews/Reviews.js","pages/MovieDetailsPage/MovieDetailsPage.js"],"names":["BASE_URL","KEY","IMG_URL","STATUS","IDLE","PENDING","RESOLVED","REJECTED","fetchWithErrorHandling","a","url","config","fetch","response","status","json","Promise","reject","Error","fetchPopular","period","fetchMovieByQuery","query","fetchMovieById","movieId","fetchMovieCast","fetchMovieReviews","getSlug","movie","slugify","title","name","id","lower","strict","parseSlug","slug","match","Cast","useParams","useState","cast","setCast","useEffect","then","data","catch","err","console","log","className","map","el","Reviews","reviews","setReviews","results","length","author","content","MovieDetailsPage","location","useLocation","history","useHistory","pastHistory","state","from","useRouteMatch","path","setStatus","setMovie","style","color","type","onClick","e","push","src","poster_path","alt","to","pathname"],"mappings":"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","file":"static/js/movie-details-page.9b8e9d04.chunk.js","sourcesContent":["export const BASE_URL = 'https://api.themoviedb.org/3/';\nexport const KEY = '6f7abc44fc4837d6e8737cb8523ac04e';\nexport const IMG_URL = 'https://image.tmdb.org/t/p/w342';\n\nexport const STATUS = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n","import { BASE_URL, KEY } from '../utils/constants';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n\n  return response.status === 200\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchPopular({ period }) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}trending/all/${period}?api_key=${KEY}`,\n  );\n}\n\nexport function fetchMovieByQuery({ query }) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}search/movie?api_key=${KEY}&language=en-US&page=1&include_adult=false&query=${query}`,\n  );\n}\n\nexport function fetchMovieById({ movieId }) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}movie/${movieId}?api_key=${KEY}&language=en-US`,\n  );\n}\n\nexport function fetchMovieCast({ movieId }) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}movie/${movieId}/credits?api_key=${KEY}&language=en-US`,\n  );\n}\n\nexport function fetchMovieReviews({ movieId }) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`,\n  );\n}\n","import slugify from 'slugify';\n\nexport const getSlug = movie => {\n  return slugify(`${movie.title || movie.name} ${movie.id}`, {\n    lower: true,\n    strict: true,\n  });\n};\n\nexport const parseSlug = slug => {\n  return slug.match(/[a-zA-Z0-9]+$/)[0];\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { fetchMovieCast } from '../../services/serviceAPI';\nimport { parseSlug } from '../../services/serviceSlugify';\n\nfunction Cast() {\n  const { slug } = useParams();\n  const movieId = parseSlug(slug);\n\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    fetchMovieCast({ movieId })\n      .then(data => setCast(data.cast))\n      .catch(err => console.log(err));\n  }, [movieId]);\n\n  return (\n    <div className=\"movieCard\">\n      <h3>CAST</h3>\n\n      {cast && (\n        <ul>\n          {cast.map(el => (\n            <li key={el.id}>{el.name}</li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nexport default Cast;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { fetchMovieReviews } from '../../services/serviceAPI';\nimport { parseSlug } from '../../services/serviceSlugify';\n\nfunction Reviews() {\n  const { slug } = useParams();\n  const movieId = parseSlug(slug);\n\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    fetchMovieReviews({ movieId })\n      .then(data => setReviews(data.results))\n      .catch(err => console.log(err));\n  }, [movieId]);\n\n  return (\n    <div className=\"movieCard\">\n      <h3>Reviews</h3>\n\n      {reviews && reviews.length ? (\n        <ul>\n          {reviews.map(el => (\n            <li key={el.id}>\n              <h4>{el.author}</h4>\n              <p>{el.content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>no reviews</p>\n      )}\n    </div>\n  );\n}\n\nexport default Reviews;\n","import { useState, useEffect } from 'react';\nimport { NavLink, useParams, useRouteMatch } from 'react-router-dom';\nimport { Route, Switch, useLocation, useHistory } from 'react-router';\n\nimport { fetchMovieById } from '../../services/serviceAPI';\nimport { parseSlug } from '../../services/serviceSlugify';\n\nimport { IMG_URL } from '../../utils/constants';\nimport { STATUS } from '../../utils/constants';\n\nimport Cast from 'components/Cast/Cast';\nimport Reviews from 'components/Reviews/Reviews';\n\nfunction MovieDetailsPage() {\n  const location = useLocation();\n  const history = useHistory();\n  const pastHistory = location?.state?.from;\n\n  const { url, path } = useRouteMatch();\n  const { slug } = useParams();\n  const movieId = parseSlug(slug);\n\n  const [status, setStatus] = useState(STATUS.IDLE);\n  const [movie, setMovie] = useState({});\n\n  useEffect(() => {\n    fetchMovieById({ movieId })\n      .then(data => setMovie(data), setStatus(STATUS.RESOLVED))\n      .catch(err => setStatus(STATUS.REJECTED));\n  }, [movieId]);\n\n  const onGoBackClick = e => {\n    history.push(pastHistory);\n  };\n\n  if (status === STATUS.RESOLVED) {\n    return (\n      <div className=\"movieCard\">\n        <h1 style={{ color: 'darkviolet' }}>MOVIE TITLE: {movie.title}</h1>\n        {pastHistory && (\n          <button type=\"button\" onClick={onGoBackClick}>\n            back\n          </button>\n        )}\n        <img\n          src={\n            movie.poster_path\n              ? `${IMG_URL}${movie.poster_path}`\n              : '../../images/fallback-photo.jpg'\n          }\n          alt={movie.title}\n        ></img>\n        <NavLink to={{ pathname: `${url}/cast`, state: { from: pastHistory } }}>\n          CAST\n        </NavLink>{' '}\n        <NavLink\n          to={{ pathname: `${url}/reviews`, state: { from: pastHistory } }}\n        >\n          REVIEWS\n        </NavLink>\n        <Switch>\n          <Route path={`${path}/cast`}>{movie && <Cast />}</Route>\n          <Route path={`${path}/reviews`}>{movie && <Reviews />}</Route>\n        </Switch>\n      </div>\n    );\n  }\n  if (status === STATUS.IDLE) {\n    return <p>enter something</p>;\n  }\n  if (status === STATUS.REJECTED) {\n    return <div className=\"errorImage\"></div>;\n  }\n}\n\nexport default MovieDetailsPage;\n"],"sourceRoot":""}